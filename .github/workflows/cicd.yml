name: Build and Test Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-application:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        
    - name: Build Backend
      run: |
          dotnet restore
          dotnet build --no-restore

    - name: Build Frontend
      run: |
          cd ./PokemonApp/Client
          npm install
          npm run build
  
  unit-and-integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: su
          POSTGRES_DB: PokemonDB
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Run unit and integration tests (Backend)
      run: |
            dotnet restore
            dotnet build --no-incremental
            export ConnectionStrings__DefaultConnection="Host=localhost;Database=PokemonDB;Username=postgres;Password=su;Port=5432"
            dotnet tool install --global dotnet-ef
            dotnet ef database update --project PokemonApp --startup-project PokemonApp
            dotnet test --no-build --verbosity normal

    - name: Run unit tests (Frontend)
      run: |
            cd ./PokemonApp/Client
            npm install
            npm run test:unit

  sonar-analysis: # Includes running of unit and integration tests to determine test coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: su
          POSTGRES_DB: PokemonDB
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Install Coverlet
        run: |
          dotnet tool install --global coverlet.console
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"mr-duke_sqs" /o:"mr-duke" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.coverage.exclusions="**/bin/**,**/obj/**,**/PokemonApp/Client/**"
          dotnet build --no-incremental
          export ConnectionStrings__DefaultConnection="Host=localhost;Database=PokemonDB;Username=postgres;Password=su;Port=5432"
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project PokemonApp --startup-project PokemonApp
          dotnet test --collect:"XPlat Code Coverage;Format=opencover"
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  
  dependency-check-security-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Install and run OWASP Dependency Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.1/dependency-check-8.2.1-release.zip
          unzip dependency-check-8.2.1-release.zip
          rm dependency-check-8.2.1-release.zip
          ./dependency-check/bin/dependency-check.sh -s . --out security --format HTML
      - name: Upload OWASP Dependency Check reports
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: security

  owasp-zap-security-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: su
          POSTGRES_DB: PokemonDB
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Start API
        run: |
              dotnet restore
              dotnet build --no-incremental
              export ConnectionStrings__DefaultConnection="Host=localhost;Database=PokemonDB;Username=postgres;Password=su;Port=5432"
              dotnet tool install --global dotnet-ef
              dotnet ef database update --project PokemonApp --startup-project PokemonApp
              dotnet run --project PokemonApp/PokemonApp.csproj &
      - name: OWASP ZAP API Scan
        uses: zaproxy/action-api-scan@v0.2.0
        with:
          target: 'http://localhost:5099/swagger/v1/swagger.json'
          fail-on-warnings: false


  cypress-gui-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: ./PokemonApp/Client
          wait-on: http://localhost:5173
          start: npx vite --host
          config-file: cypress.config.js
          component: true

  performance-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: su
          POSTGRES_DB: PokemonDB
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
    
      - name: Start up application
        run: |
              dotnet restore
              export ConnectionStrings__DefaultConnection="Host=localhost;Database=PokemonDB;Username=postgres;Password=su;Port=5432"
              dotnet tool install --global dotnet-ef
              dotnet ef database update --project PokemonApp --startup-project PokemonApp
              dotnet run --project PokemonApp/PokemonApp.csproj &

      - name: Wait for application to start
        run: | 
              sleep 10s
              curl -X 'GET' 'http://localhost:5099/api/pokemon/25' -H 'accept: */*'

      - name: Install k6
        run: |
              sudo gpg -k
              sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
              echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
              sudo apt-get update
              sudo apt-get install k6

      - name: Run Load Test
        run: k6 run ./PokemonApp.Tests/PerformanceTests/LoadTest.js

      # Stress, Spike and Soak Tests are only run optionally because they are very time-consuming!
      #- name: Run Stress Test
      #  run: k6 run ./PokemonApp.Tests/PerformanceTests/StressTest.js

      #- name: Run Spike Test
      #  run: k6 run ./PokemonApp.Tests/PerformanceTests/SpikeTest.js

      #- name: Run Soak Test
      #  run: k6 run ./PokemonApp.Tests/PerformanceTests/SpikeTest.js